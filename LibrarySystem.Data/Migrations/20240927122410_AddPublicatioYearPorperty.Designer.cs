// <auto-generated />
using System;
using LibrarySystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibrarySystem.Data.Migrations
{
    [DbContext(typeof(LibrarySystemContext))]
    [Migration("20240927122410_AddPublicatioYearPorperty")]
    partial class AddPublicatioYearPorperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibrarySystem.Domain.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1920, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Isaac Asimov"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1903, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "George Orwell"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1775, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jane Austen"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1917, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Arthur C. Clarke"
                        });
                });

            modelBuilder.Entity("LibrarySystem.Domain.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("PublicationYear")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Genre = "Science Fiction",
                            PublicationYear = new DateOnly(1, 1, 1),
                            Title = "Foundation"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Genre = "Fantasy",
                            PublicationYear = new DateOnly(1, 1, 1),
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Genre = "Dystopian",
                            PublicationYear = new DateOnly(1, 1, 1),
                            Title = "1984"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            Genre = "Classic",
                            PublicationYear = new DateOnly(1, 1, 1),
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            Genre = "Science Fiction",
                            PublicationYear = new DateOnly(1, 1, 1),
                            Title = "Rendezvous with Rama"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 2,
                            Genre = "Fantasy",
                            PublicationYear = new DateOnly(1, 1, 1),
                            Title = "Harry Potter and the Chamber of Secrets"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 3,
                            Genre = "Political Satire",
                            PublicationYear = new DateOnly(1, 1, 1),
                            Title = "Animal Farm"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 4,
                            Genre = "Classic",
                            PublicationYear = new DateOnly(1, 1, 1),
                            Title = "Emma"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 5,
                            Genre = "Science Fiction",
                            PublicationYear = new DateOnly(1, 1, 1),
                            Title = "Childhood's End"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 1,
                            Genre = "Science Fiction",
                            PublicationYear = new DateOnly(1, 1, 1),
                            Title = "Foundation and Empire"
                        });
                });

            modelBuilder.Entity("LibrarySystem.Domain.Book", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Author", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
